// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Minimum {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  phone                String?
  email                String?
  avatar               String?               @default("/")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  Token                Token[]
  Minimums             Minimum[]
  Products             Product[]
  Favourites           Favourite[]
  Posts                Post[]
  Wonderings           Wondering[]
  Answers              Answer[]
  Likes                Like[]
  Helps                Help[]
  ChattingRooms        ChattingRoom[]
  StreamingChatBubbles StreamingChatBubble[]
  Streams              Stream[]

  @@unique([phone, email])
  @@unique([id, name, avatar])
  @@unique([id, avatar])
}

model Token {
  id        String   @id @default(uuid())
  value     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.Char(55)
  price       Float       @db.Double
  description String      @db.LongText
  favourites  Favourite[]
  comments    Int         @default(0)
  user        User        @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId      Int
  userName    String
  userAvatar  String
}

model Favourite {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id          Int         @id @default(autoincrement())
  question    String      @db.Char(55)
  description String      @db.LongText
  wonderings  Wondering[]
  answers     Answer[]
  user        User        @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId      Int
  userName    String
  userAvatar  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Wondering {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         Int      @id @default(autoincrement())
  answer     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  user       User     @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId     Int
  userName   String
  userAvatar String
  likes      Like[]
  helps      Help[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Help {
  id        Int      @id @default(autoincrement())
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChattingRoom {
  id           Int                   @id @default(autoincrement())
  createUser   User                  @relation(fields: [createUserId], references: [id], onDelete: Cascade)
  createUserId Int
  chatContents StreamingChatBubble[]
  stream       Stream                @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId     Int
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model StreamingChatBubble {
  id             Int          @id @default(autoincrement())
  content        String
  user           User         @relation(fields: [userId, userAvatar], references: [id, avatar], onDelete: Cascade)
  userId         Int
  userAvatar     String
  ChattingRoom   ChattingRoom @relation(fields: [chattingRoomId], references: [id])
  chattingRoomId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Stream {
  id           Int            @id @default(autoincrement())
  title        String         @db.Char(55)
  description  String         @db.LongText
  user         User           @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId       Int
  userName     String
  userAvatar   String
  chattingRoom ChattingRoom[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
