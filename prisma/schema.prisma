// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filteredRelationCount"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Minimum {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  phone           String?
  email           String?
  avatar          String?         @default("/")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Token           Token[]
  writtenReviews  Review[]        @relation(name: "writtenReviews")
  receivedReviews Review[]        @relation(name: "receivedReviews")
  Minimums        Minimum[]
  Products        Product[]
  Favourites      Favourite[]
  Sales           Sale[]
  Purchases       Purchase[]
  Posts           Post[]
  Wonderings      Wondering[]
  Answers         Answer[]
  Likes           Like[]
  Helps           Help[]
  StreamMessages  StreamMessage[]
  Streams         Stream[]
  records         Record[]

  @@unique([phone, email])
  @@unique([id, name, avatar])
  @@unique([id, avatar])
  @@unique([name, avatar])
}

model Token {
  id        String   @id @default(uuid())
  value     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.LongText
  star         Int      @default(1)
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Record {
  id        Int        @id @default(autoincrement())
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  type      RecordType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum RecordType {
  Purchase
  Sale
  Fav
}

model Favourite {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.Char(200)
  price       Float       @db.Double
  description String      @db.LongText
  image       String
  comments    Int         @default(0)
  user        User        @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId      Int
  userName    String
  userAvatar  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  favourites  Favourite[]
  sales       Sale[]
  purchases   Purchase[]
  records     Record[]
}

model Post {
  id          Int         @id @default(autoincrement())
  question    String      @db.Char(55)
  description String      @db.LongText
  wonderings  Wondering[]
  answers     Answer[]
  user        User        @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId      Int
  userName    String
  userAvatar  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Wondering {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id         Int      @id @default(autoincrement())
  answer     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
  user       User     @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId     Int
  userName   String
  userAvatar String
  likes      Like[]
  helps      Help[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Help {
  id        Int      @id @default(autoincrement())
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StreamMessage {
  id         Int      @id @default(autoincrement())
  content    String
  user       User     @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId     Int
  userName   String
  userAvatar String
  stream     Stream   @relation(fields: [streamId], references: [id])
  streamId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Stream {
  id          Int             @id @default(autoincrement())
  productName String
  title       String          @db.Char(55)
  price       Int
  description String?         @db.LongText
  user        User            @relation(fields: [userId, userName, userAvatar], references: [id, name, avatar], onDelete: Cascade)
  userId      Int
  userName    String
  userAvatar  String
  messages    StreamMessage[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
